#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('Surrey:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '7010');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var socketIO = require('socket.io');
// クライアントの接続を待つ(IPアドレスとポート番号を結びつけます)
var io = socketIO.listen(server);

// ユーザリスト
var members = [];
// コメントリスト
var comments = []
// 新しく入ってきたユーザリスト
var new_members = [];

// クライアントが接続してきたときの処理
io.sockets.on('connection', function(socket) {
  console.log("connection");

  // 接続開始カスタムイベント(接続元ユーザを保存し、他ユーザへ通知)
  socket.on("login", function (member) {
    members.push(member);
    var all_data = { "members": members, "comments": comments };
    io.sockets.emit("come_member", all_data);
    new_members.push(member);
    socket.broadcast.emit("get_video_stat");
  });

  // 状態情報を送信
  socket.on('set_new_members', function(stat) {
    for (var i = 0; i < new_members.length; i++) {
      socket.to(new_members[i].id).emit('set_video_stat', stat);
    }
    // 新しく参加したメンバ全員に送り終えたら初期化
    new_members = [];
  } )

  // メッセージを受けたときの処理
  socket.on('message', function(data) {
    // つながっているクライアント全員に送信
    console.log("message");
    comments.push(data);
    io.sockets.emit('message', { value: data.value });
  });

  // ビデオ操作イベント
  socket.on('play', function() {
    console.log("play");
    socket.broadcast.emit('play');
  } );
  socket.on('pause', function() {
    console.log("pause");
    socket.broadcast.emit('pause');
  } );
  
  // クライアントが切断したときの処理
  socket.on('disconnect', function(){
    console.log("disconnect");
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
